# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  undertown_v3
# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  InfraStackName:
    Type: String
    Description: "Stack name for infra template"
  Stage:
    Type: String
    Description: "Stage name for deployment"
    Default: "dev"

Globals:
  Function:
    Timeout: 10
    MemorySize: 128

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  SSRRender:
    Type: AWS::Serverless::API
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'OPTIONS, POST, GET'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'" #DO NOT USE THIS VALUE IN PRODUCTION - https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html

  PropertiesAPIBackend:
    Type: AWS::Serverless::API
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'OPTIONS, POST, GET'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'" #DO NOT USE THIS VALUE IN PRODUCTION - https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html
  # TODO move each golang inside it's own context
  # the build might fail because it has dependencies that it can't grab at build time
  # AddProperty:
  #   Type: AWS::Serverless::Function
  #   Metadata:
  #     DockerTag: addproperty-go1.x-alpine
  #     DockerContext: ./
  #     Dockerfile: services/api/addProperty/Dockerfile
  #   Properties:
  #     PackageType: Image
  #     Architectures:
  #       - x86_64
  #     Events:
  #       APIEvent:
  #         Type: Api
  #         Properties:
  #           Path: /add
  #           Method: POST
  #           RestApiId:
  #             Ref: PropertiesAPIBackend
  #     Environment:
  #       Variables:
  #         STAGE: !Ref Stage

  # GetHomepageProperties:
  #   Type: AWS::Serverless::Function
  #   Metadata:
  #     DockerTag: addproperty-go1.x-alpine
  #     DockerContext: ./
  #     Dockerfile: services/api/getHomepageProperties/Dockerfile
  #   Properties:
  #     PackageType: Image
  #     Architectures:
  #       - x86_64
  #     Events:
  #       APIEvent:
  #         Type: Api
  #         Properties:
  #           Path: /get_homepage_properties
  #           Method: GET
  #           RestApiId:
  #             Ref: PropertiesAPIBackend
  #     Environment:
  #       Variables:
  #         STAGE: !Ref Stage
  # TODO run a lambda web application layer and run a express server on this
  # to ssr all the html pages
  Homepage:
    Type: AWS::Serverless::Function
    Metadata: # Manage esbuild properties
      DockerTag: homepage_v1
      DockerContext: services/ssr/homepage
      Dockerfile: Dockerfile
    Properties:
      PackageType: Image
      MemorySize: 1024
      Architectures:
        - x86_64
      Events:
        Home:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId:
              Ref: SSRRender
      Environment:
        Variables:
          GET_HOMEPAGE_PROPERTIES: !Sub
            - "https://${PropertiesAPIBackend}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/get_homepage_properties"
            - ApiId: !Ref SecondApi
            - StageName: !Ref Stage
          STAGE: !Ref Stage
          RUST_LOG: info
          PORT: 8080

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # S3 Bucket to host single page app website
  WebSiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
  WebSiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref WebSiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: "PolicyForCloudFrontPrivateContent"
        Statement:
          - Sid: "AllowCloudFrontServicePrincipal"
            Effect: "Allow"
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Join ["", ["arn:aws:s3:::", !Ref WebSiteBucket, "/*"]]
            Condition:
              StringEquals:
                "AWS:SourceArn":
                  !Join [
                    "",
                    [
                      "arn:aws:cloudfront::",
                      !Ref "AWS::AccountId",
                      ":distribution/",
                      !Ref CloudFrontDistribution,
                    ],
                  ]

  # CloudFront Distribution for hosting the single page app website
  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebSiteBucket.RegionalDomainName
            Id: "myS3Origin"
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
        Enabled: true
        DefaultRootObject: "index.html"
        HttpVersion: "http2"
        DefaultCacheBehavior:
          AllowedMethods:
            - "DELETE"
            - "GET"
            - "HEAD"
            - "OPTIONS"
            - "PATCH"
            - "POST"
            - "PUT"
          CachedMethods:
            - "GET"
            - "HEAD"
          TargetOriginId: "myS3Origin"
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: "none"
          ViewerProtocolPolicy: "allow-all"
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: "PriceClass_200"
        Restrictions:
          GeoRestriction:
            RestrictionType: "whitelist"
            Locations:
              - "US"
              - "CA"
              - "GB"
              - "DE"
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
  CloudFrontOriginAccessControl:
    Type: "AWS::CloudFront::OriginAccessControl"
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${WebSiteBucket} OAC"
        OriginAccessControlOriginType: "s3"
        SigningBehavior: "always"
        SigningProtocol: "sigv4"
Outputs:
  Stage:
    Value: !Ref Stage
  APIGatewayEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Stage/"
  PropertiesAPIendpoint:
    Description: "the api for the backend"
    Value: !Sub "https://${PropertiesAPIBackend}.execute-api.${AWS::Region}.amazonaws.com/Stage/"
    Export:
      Name: !Sub "${InfraStackName}:PropertiesAPIendpoint"
  CloudFrontDistributionId:
    Description: "CloudFront Distribution ID for hosting web front end"
    Value: !Ref CloudFrontDistribution
  CloudFrontDistributionDomainName:
    Description: "CloudFront Distribution Domain Name for accessing web front end"
    Value: !GetAtt CloudFrontDistribution.DomainName
  WebS3BucketName:
    Description: "S3 Bucket for hosting web frontend"
    Value: !Ref WebSiteBucket
