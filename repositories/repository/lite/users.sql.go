// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package lite

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
        id,
        created_at,
        isAdmin,
        isSu,
        email,
        passwordHash
    )
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID           string
	CreatedAt    time.Time
	Isadmin      bool
	Issu         bool
	Email        string
	Passwordhash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.Isadmin,
		arg.Issu,
		arg.Email,
		arg.Passwordhash,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, isadmin, issu, email, passwordhash
FROM users
WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Isadmin,
		&i.Issu,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, isadmin, issu, email, passwordhash
FROM users
where email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Isadmin,
		&i.Issu,
		&i.Email,
		&i.Passwordhash,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, created_at, isadmin, issu, email, passwordhash
FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Isadmin,
			&i.Issu,
			&i.Email,
			&i.Passwordhash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users
SET email = ?
WHERE id = ?
`

type UpdateUserEmailParams struct {
	Email string
	ID    string
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.Email, arg.ID)
	return err
}
